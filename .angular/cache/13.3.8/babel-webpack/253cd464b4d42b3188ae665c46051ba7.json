{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Global } from '../services/global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let PaintingsResolveService = /*#__PURE__*/(() => {\n  class PaintingsResolveService {\n    constructor(activatedRoute, _http) {\n      this._http = _http;\n      this.currentPage = 1;\n      this.loader = false;\n      this.animation = false;\n      this.url = Global.url;\n    } // Getting paintings\n\n\n    paintingsData() {\n      this.loader = true;\n      this.suscripcion2 = this.activatedRoute.data.subscribe({\n        next: response => {\n          this.animation = true;\n          this.paintings = response.paintings.paints.sort(() => {\n            return 0.5 - Math.random();\n          });\n          this.totalPages = response.paintings.results.total;\n        }\n      });\n      this.suscripcion2 = this.paintingService.getPaintingsPagination(this.currentPage).subscribe({\n        next: response => {\n          this.loader = false;\n          response.paints.forEach(e => {\n            this.paintings.push(e);\n          });\n          this.totalPages = response.results.total;\n        }\n      });\n    }\n\n    intersectionObserver() {\n      let options = {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.5\n      };\n      this.observer = new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting) {\n          if (this.currentPage < this.totalPages) {\n            this.currentPage++;\n            this.paintingsData();\n          }\n        }\n      }, options);\n    }\n\n    resolve(route, state) {\n      return this._http.get(`${this.url}paintings?page=${this.currentPage}&limit=6`).pipe(catchError(error => {\n        return of('No data found');\n      }));\n    }\n\n  }\n\n  PaintingsResolveService.ɵfac = function PaintingsResolveService_Factory(t) {\n    return new (t || PaintingsResolveService)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  PaintingsResolveService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PaintingsResolveService,\n    factory: PaintingsResolveService.ɵfac,\n    providedIn: 'root'\n  });\n  return PaintingsResolveService;\n})();","map":null,"metadata":{},"sourceType":"module"}